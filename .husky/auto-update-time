#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const { spawnSync, spawn } = require('child_process');
const moment = require('moment');
// const postPath = './source/_posts';
const matchRegExp =
  /update:\s*(\d{2,4}\-\d{1,2}\-\d{1,2}(\s*\d{1,2}\:\d{1,2}(\:\d{1,2})?)?)/i;
const format = 'YYYY-MM-DD HH:mm:ss';

// fix: 不应该是遍历_post, 应该只是拿到git修改的md文件
// const files = fs
//   .readdirSync(path.resolve(process.cwd(), postPath))
//   .filter((v) => path.extname(v) === '.md');

batchModifyMarkdownUpdateTime();

async function batchModifyMarkdownUpdateTime() {
  const files = await getChangeMarkdownFiles();
  files.forEach((filename) => {
    const filePath = path.resolve(process.cwd(), filename);
    const { mtimeMs, mtime } = fs.statSync(filePath);
    const content = fs.readFileSync(filePath, { encoding: 'utf-8' });
    const updatedDate = content.match(matchRegExp)?.[1];
    if (updatedDate) {
      const threshold = 1000 * 60 * 5; // 五分钟内的修改就忽略不计了
      console.log(new Date(mtimeMs), new Date(updatedDate));
      if (mtimeMs - new Date(updatedDate).getTime() > threshold) {
        process.stdout.write(
          `${filename}最后更新时间变更: ${moment(updatedDate).format(
            format
          )} -> ${moment(mtime).format(format)}\n`
        );
        fs.writeFileSync(
          filePath,
          content.replace(
            matchRegExp,
            `update: ${moment(mtime).format(format)}`
          ),
          { encoding: 'utf-8' }
        );
      }
    }
  });

  // 提交修改
  spawnSync('git', ['add', '-A']);
}

function getChangeMarkdownFiles() {
  return new Promise((resolve, reject) => {
    const gitDiff = spawn('git', ['diff', '--name-status', '--staged']);
    let data = '';
    gitDiff.stdout.on('data', (chunk) => {
      data += chunk;
    });
    gitDiff.stdout.on('close', () => {
      try {
        const files = data
          .split(/\n|\r\n/)
          .filter((v) => v)
          .map((v) => v.split(/\s+/))
          .filter(
            (v) =>
              v.length === 2 && v?.[0] !== 'D' && path.extname(v?.[1]) === '.md'
          )
          .map((v) => v[1]);
        resolve(files);
      } catch (error) {
        reject(error);
      }
    });
  });
}
